name: Build CLI and Server

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            GOOS: linux
            GOARCH: amd64
            output_name: linux-amd64
          - os: ubuntu-latest
            GOOS: linux
            GOARCH: arm64
            output_name: linux-arm64
          - os: macos-latest
            GOOS: darwin
            GOARCH: amd64
            output_name: darwin-amd64
          - os: macos-latest
            GOOS: darwin
            GOARCH: arm64
            output_name: darwin-arm64

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Read Go version from go.mod
        id: go-version
        run: |
          GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | awk '{print $2}')
          echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.GO_VERSION }}

      - name: Build CLI
        run: |
          GOOS=${{ matrix.GOOS }} GOARCH=${{ matrix.GOARCH }} go build -o sse-proxy-cli-${{ matrix.output_name }} ./cmd/cli

      - name: Build Server
        run: |
          GOOS=${{ matrix.GOOS }} GOARCH=${{ matrix.GOARCH }} go build -o sse-proxy-server-${{ matrix.output_name }} .

      - name: Create tarball
        run: tar -czvf sse-proxy-cli-${{ matrix.output_name }}.tar.gz sse-proxy-cli-${{ matrix.output_name }}

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v3
        with:
          name: sse-proxy-cli-${{ matrix.output_name }}.tar.gz
          path: sse-proxy-cli-${{ matrix.output_name }}.tar.gz

      - name: Upload Server artifact
        uses: actions/upload-artifact@v3
        with:
          name: sse-proxy-server-${{ matrix.output_name }}
          path: sse-proxy-server-${{ matrix.output_name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-7)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for output_name in linux-amd64 linux-arm64 darwin-amd64 darwin-arm64; do
            # Upload CLI tarball
            curl -L \
              -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              -H "Accept: application/vnd.github.v3+json" \
              --data-binary "@sse-proxy-cli-${output_name}.tar.gz" \
              "${{ steps.create_release.outputs.upload_url }}?name=sse-proxy-cli-${output_name}.tar.gz"

            # Upload Server binary
            curl -L \
              -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              -H "Accept: application/vnd.github.v3+json" \
              --data-binary "@sse-proxy-server-${output_name}" \
              "${{ steps.create_release.outputs.upload_url }}?name=sse-proxy-server-${output_name}"
          done

      - name: List uploaded assets
        run: |
          echo "Uploaded assets:"
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "${{ steps.create_release.outputs.upload_url }}" | jq '.[].name'
